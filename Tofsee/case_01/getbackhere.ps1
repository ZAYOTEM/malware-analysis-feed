param (
    [string]$params = "",
    [int]$port = 0,
    [string]$log = "",
    [switch]$noheader,
    [switch]$manual,
    [switch]$help
)

$zayotem = @"
  ________________________________________    _____  _________  ____  __.
 /  _____/\_   _____/\__    ___/\______   \  /  _  \ \_   ___ \|    |/ _|
/   \  ___ |    __)_   |    |    |    |  _/ /  /_\  \/    \  \/|      <  
\    \_\  \|        \  |    |    |    |   \/    |    \     \___|    |  \ 
 \______  /_______  /  |____|    |______  /\____|__  /\______  /____|__ \
        \/        \/                    \/         \/        \/        \/
                ___ ___________________________________                  
               /   |   \_   _____/\______   \_   _____/                  
              /    ~    \    __)_  |       _/|    __)_                   
              \    Y    /        \ |    |   \|        \                  
               \___|_  /_______  / |____|_  /_______  /                  
                     \/        \/         \/        \/    v1.0               

      -----------------------------------------------------------
      | Twitter: https://twitter.com/zayotem                    |
      | Github: https://github.com/ZAYOTEM                      |
      | Authors: alperaktasm                                    |
      -----------------------------------------------------------
"@  

$help_ = @"
    Usage: .\getbackhere.ps1 [OPTIONS] [VALUE]
    -params <PARAMS>        parameters you want to return             
    -port <PORT>            port to listen
    -log <FILE>             save the output
    -noheader               do not show headers
    -manual                 parameter on request
    -help                   help printout

  Exp:  .\getbackhere.ps1 -params 'recv=1&job=REBOOT' -port 80 -log log.txt
  Exp2: .\getbackhere.ps1 -manual -port 80 -noheader
  Note: Don't forget to edit the /etc/hosts file!
"@

if ($help.IsPresent) {
    Write-Host $zayotem -ForegroundColor Green
    Write-Host ""
    Write-Host $help_ -ForegroundColor Cyan
    Write-Host ""
    exit
}

# Parametre kontrolü
if ((([string]::IsNullOrEmpty($params)) -and (-not $manual.IsPresent) ) -or ($port -eq 0)) {
    Write-Host $zayotem -ForegroundColor Green
    Write-Host ""
    Write-Host $help_ -ForegroundColor Cyan
    Write-Host ""
    exit
}

Write-Host $zayotem -ForegroundColor Green
Write-Host ""

if ($log -ne ""){
    New-Item -Path $log -ItemType File -Force | Out-Null
    Add-Content -Path $log -Value $zayotem
    Add-Content -Path $log -Value ""
}

Write-Host -ForegroundColor Green "[*] " -NoNewLine
Write-Host ("Listening for incoming requests on 127.0.0.1:" + $port + "...")
Write-Host ""

$endpoint = New-Object System.Net.IPEndPoint ([System.Net.IPAddress]::Any, $port)
$listener = New-Object System.Net.Sockets.TcpListener $endpoint
$listener.Start()

$timeout = 23000

try{
    do {
        if ($listener.Pending()) {
            $client = $listener.AcceptTcpClient() 
            $client.ReceiveTimeout = $timeout 
            $stream = $client.GetStream()
            $reader = New-Object System.IO.StreamReader $stream

            $stream.ReadTimeout = $timeout

            $headers = @{}
            if ($noheader.IsPresent) { $c = 1 }
            do {
                $line = $reader.ReadLine()
                if ($line -eq "") {
                    break
                }
                if ($noheader.IsPresent){
                    if ($line -match "Host" -or $c -eq 1){ 
                        Write-Host $line
                        if ($log -ne ""){
                            Add-Content -Path $log -Value $line
                        }
                    }
                }else{
                    Write-Host $line
                    if ($log -ne ""){ Add-Content -Path $log -Value $line }
                }
                
                $header = $line -split ": ", 2
                $headers[$header[0]] = $header[1]
                $c = $c + 1
            } while ($line -and $line -ne ([char]4))

            $contentLength = [int]$headers["Content-Length"]
            $body = New-Object char[] $contentLength
            $reader.Read($body, 0, $contentLength) | Out-Null

            if (-not [string]::IsNullOrEmpty($body)) {
                Write-Host "Received body: $($body -join '')" -ForegroundColor Cyan   
            }

            if ($manual.IsPresent){
                Write-Host -ForegroundColor Green "[*] " -NoNewLine
                $params_ = Read-Host "Enter the data to send: "
                $response = "HTTP/1.1 200 OK`r`nContent-Type: text/html`r`n`r`n$params_"
            }else{
                $response = "HTTP/1.1 200 OK`r`nContent-Type: text/html`r`n`r`n$params"
            }
            $buffer = [System.Text.Encoding]::UTF8.GetBytes($response)
            $stream.Write($buffer, 0, $buffer.Length)

            if ($log -ne ""){ 
                if (-not [string]::IsNullOrEmpty($body)) {
                    Add-Content -Path $log -Value $($body -join '')
                }
                Add-Content -Path $log -Value "---------------------------"
            }
            
            Write-Host -ForegroundColor Green "---------------------------"

            # Windows 7 ve öncesi
            $osVersion = [System.Environment]::OSVersion.Version
            if ($osVersion.Major -lt 6 -or ($osVersion.Major -eq 6 -and $osVersion.Minor -lt 2)) {
                $reader.Close()
                $stream.Close()
                $client.Close()
            }
            else {
                $reader.Dispose()
                $stream.Dispose()
                $client.Dispose()
            }
        }
        else {
            Start-Sleep -Milliseconds 500
        }
    } while ($line -ne ([char]4))
    $listener.Stop()
}finally{
    Write-Host -ForegroundColor Green "[*] " -NoNewLine
    Write-Host "Exiting"
    $listener.Stop()
}